{"version":3,"sources":["images/beth.png","images/birdperson.png","images/evilmorty.png","images/gianthead.png","images/goldenford.png","images/jerry.png","images/jessica.png","images/meeseeks.png","images/morty.png","images/poopy.png","images/rick.png","images/summer.png","components/Navbar/Navbar.js","components/Character/Character.js","components/Container/Container.js","components/Footer/Footer.js","components/Banner/Banner.js","images.js","components/ClickyGame.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","className","navMsgColor","navMessage","score","highScore","Character","onClick","e","clickEvent","target","src","name","alt","Container","shake","characters","map","a","i","key","Footer","Banner","images","beth","birdperson","evilmorty","gianthead","goldenford","jerry","jessica","meeseeks","morty","poopy","rick","summer","ClickyGame","state","allCharacters","shuffleArray","wasClicked","checkClicked","bind","newArr","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElem","prevState","this","shuffled","includes","console","log","setState","setTimeout","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88a3b1dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beth.4d5e65a0.png\";","module.exports = __webpack_public_path__ + \"static/media/birdperson.612ba8d4.png\";","module.exports = __webpack_public_path__ + \"static/media/evilmorty.0657e1f4.png\";","module.exports = __webpack_public_path__ + \"static/media/gianthead.978b3847.png\";","module.exports = __webpack_public_path__ + \"static/media/goldenford.3774b39d.png\";","module.exports = __webpack_public_path__ + \"static/media/jerry.af8e8a84.png\";","module.exports = __webpack_public_path__ + \"static/media/jessica.a9644830.png\";","module.exports = __webpack_public_path__ + \"static/media/meeseeks.9667b7ee.png\";","module.exports = __webpack_public_path__ + \"static/media/morty.244deeda.png\";","module.exports = __webpack_public_path__ + \"static/media/poopy.d61b2d5b.png\";","module.exports = __webpack_public_path__ + \"static/media/rick.06b65841.png\";","module.exports = __webpack_public_path__ + \"static/media/summer.afdbb7bf.png\";","import React from 'react';\nimport './Navbar.css';\n\nconst Navbar = props => (\n  <div className=\"navbar \">\n    <div>Clicky Game</div>\n    <div className={props.navMsgColor}>{props.navMessage}</div>\n    <div>\n      Score: {props.score} <span className=\"pipe\">|</span> High Score: {props.highScore}\n    </div>\n  </div>\n);\n\nexport default Navbar;\n","import React from 'react';\nimport './Character.css';\n\n// onClick function is defined as a callback so that the clicked elements value can be passed to props.clickEvent to check if the image has been clicked or not\nconst Character = props => (\n  <div className=\"card\" onClick={e => props.clickEvent(e.target.src)}>\n    <img className=\"card-img-top card-height\" src={props.name} alt=\"\" />\n  </div>\n);\n\nexport default Character;\n","import React from 'react';\nimport './Container.css';\nimport Character from '../Character';\n\n// Container for each Character component loops through each index in props.characters, which contains an array of character images to create a new Character component for each image attaches the passed down clickEvent function to each Character component\nconst Container = props => (\n  <div\n    className={\n      props.shake\n        ? 'container d-flex flex-wrap justify-content-center shake'\n        : 'container d-flex flex-wrap justify-content-center'\n    }\n  >\n    {props.characters.map((a, i) => <Character name={a} key={i} clickEvent={props.clickEvent} />)}\n  </div>\n);\n\nexport default Container;\n","import React from 'react';\nimport './Footer.css';\n\nconst Footer = () => <div className=\"footer text-center\">David Huang</div>;\n\nexport default Footer;\n","import React from 'react';\nimport './Banner.css';\n\nconst Banner = () => (\n  <div className=\"banner text-center d-flex align-items-center justify-content-center\">\n    <p>Click on an image to earn points, but don't click on any image more than once!</p>\n  </div>\n);\n\nexport default Banner;\n","import beth from './images/beth.png';\r\nimport birdperson from './images/birdperson.png';\r\nimport evilmorty from './images/evilmorty.png';\r\nimport gianthead from './images/gianthead.png';\r\nimport goldenford from './images/goldenford.png';\r\nimport jerry from './images/jerry.png';\r\nimport jessica from './images/jessica.png';\r\nimport meeseeks from './images/meeseeks.png';\r\nimport morty from './images/morty.png';\r\nimport poopy from './images/poopy.png';\r\nimport rick from './images/rick.png';\r\nimport summer from './images/summer.png';\r\n\r\nconst images = [\r\n    beth,\r\n    birdperson,\r\n    evilmorty,\r\n    gianthead,\r\n    goldenford,\r\n    jerry,\r\n    jessica,\r\n    meeseeks,\r\n    morty,\r\n    poopy,\r\n    rick,\r\n    summer\r\n];\r\n\r\nexport default images;\r\n","import React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Container from './Container';\nimport Footer from './Footer';\nimport Banner from './Banner';\nimport images from '../images';\n\nclass ClickyGame extends Component {\n    state = {\n        score: 0,\n        highScore: 0,\n\n        // Stores the class value to assign to navMessage based on a good or bad click\n        navMsgColor: '',\n\n        // Contains intro, success, and failure message\n        navMessage: 'Click an image to begin!',\n\n        // Contains an array of image urls\n        allCharacters: this.shuffleArray(),\n\n        // Array to track clicked elements\n        wasClicked: [],\n\n        // Shakes the container of images on an incorrect guess if set to true\n        shake: false\n    };\n\n    // Binds the current this context to checkClicked to have access to the current state when passed down to the Character component\n    clickEvent = this.checkClicked.bind(this);\n\n    // Used to shuffle the array of images when the DOM loads, and when an image is clicked\n    shuffleArray() {\n        // Creates a copy of the current characters array to modify it by value, and not by reference\n        const newArr = images.slice();\n\n        // Array to store the shuffled array\n        const shuffleArr = [];\n\n        // Each loop through an index gets spliced from newArr, reducing its length gets a random index based off the current length of newArr splices the value from newArr, and pushes it to shuffleArr\n        while (newArr.length > 0) {\n            shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\n        }\n\n        return shuffleArr;\n    }\n\n    checkClicked(clickedElem) {\n        // Creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\n        const prevState = this.state.wasClicked.slice();\n\n        // Shuffles the images\n        const shuffled = this.shuffleArray();\n\n        // Tracks score\n        let score = this.state.score;\n        let highScore = this.state.highScore;\n\n        // If the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\n        if (!this.state.wasClicked.includes(clickedElem)) {\n            if (score >= 12) {\n                console.log('You win');\n            }\n\n            // If score is greater than or equal to highScore are the same, then there is a new highScore value\n            if (score >= highScore) {\n                score++;\n                highScore++;\n            }\n            // If they are not equal, then only increase the score value\n            else {\n                score++;\n            }\n\n            // Adds the clicked item to wasClicked to track that it has been clicked\n            prevState.push(clickedElem);\n        }\n\n        // Resets the current score if the same element was clicked twice\n        if (this.state.wasClicked.includes(clickedElem)) {\n            let score = 0;\n            return this.setState({\n                score: score,\n                highScore: highScore,\n                navMsgColor: 'incorrect',\n                navMessage: 'Incorrect guess!',\n                allCharacters: shuffled,\n                wasClicked: [],\n                shake: true\n            });\n        }\n\n        // If this runs, then the same element has not been clicked twice and the score is increased\n        this.setState({\n            score: score,\n            highScore: highScore,\n            navMsgColor: 'correct',\n            navMessage: 'You Guessed Correctly!',\n            allCharacters: shuffled,\n            wasClicked: prevState,\n            shake: false\n        });\n\n        // Removes the green correct indicator on a successful click after .5s to re-render the class on each success\n        return setTimeout(() => this.setState({ navMsgColor: '' }), 500);\n    }\n\n    // Renders score to the navbar. Passes the randomized state.allCharacters array to Container to create a Character component for each image. Passes the this.checkClicked down to container to pass to each Character component to be used for the click event.\n    render() {\n        const state = this.state;\n        return (\n            <div>\n                <Navbar\n                    score={state.score}\n                    highScore={state.highScore}\n                    navMessage={state.navMessage}\n                    navMsgColor={state.navMsgColor}\n                />\n                <Banner />\n                <Container\n                    shake={state.shake}\n                    characters={state.allCharacters}\n                    clickEvent={this.clickEvent}\n                />\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default ClickyGame;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ClickyGame from './components/ClickyGame';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<ClickyGame />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}